//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgOpenGPS {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class gStr {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal gStr() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("AgOpenGPS.gStr", typeof(gStr).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AB Curve.
        /// </summary>
        public static string gsABCurve {
            get {
                return ResourceManager.GetString("gsABCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AB Line.
        /// </summary>
        public static string gsABline {
            get {
                return ResourceManager.GetString("gsABline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à About....
        /// </summary>
        public static string gsAbout {
            get {
                return ResourceManager.GetString("gsAbout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Action Has Been Cancelled.
        /// </summary>
        public static string gsActionHasBeenCancelled {
            get {
                return ResourceManager.GetString("gsActionHasBeenCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Actual.
        /// </summary>
        public static string gsActual {
            get {
                return ResourceManager.GetString("gsActual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Agressiveness.
        /// </summary>
        public static string gsAgressiveness {
            get {
                return ResourceManager.GetString("gsAgressiveness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Alarm.
        /// </summary>
        public static string gsAlarm {
            get {
                return ResourceManager.GetString("gsAlarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Antenna Type.
        /// </summary>
        public static string gsAntennaType {
            get {
                return ResourceManager.GetString("gsAntennaType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Area.
        /// </summary>
        public static string gsArea {
            get {
                return ResourceManager.GetString("gsArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Are you sure ?.
        /// </summary>
        public static string gsAreYouSure {
            get {
                return ResourceManager.GetString("gsAreYouSure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Arrows R / L.
        /// </summary>
        public static string gsArrowsRL {
            get {
                return ResourceManager.GetString("gsArrowsRL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Attachment Style.
        /// </summary>
        public static string gsAttachmentStyle {
            get {
                return ResourceManager.GetString("gsAttachmentStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Auto Day Night.
        /// </summary>
        public static string gsAutoDayNight {
            get {
                return ResourceManager.GetString("gsAutoDayNight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Auto Steer Configuration.
        /// </summary>
        public static string gsAutoSteerConfiguration {
            get {
                return ResourceManager.GetString("gsAutoSteerConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AutoSteer Port.
        /// </summary>
        public static string gsAutoSteerPort {
            get {
                return ResourceManager.GetString("gsAutoSteerPort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Based on Field:.
        /// </summary>
        public static string gsBasedOnField {
            get {
                return ResourceManager.GetString("gsBasedOnField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Boundary.
        /// </summary>
        public static string gsBoundary {
            get {
                return ResourceManager.GetString("gsBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Boundary Curve.
        /// </summary>
        public static string gsBoundaryCurve {
            get {
                return ResourceManager.GetString("gsBoundaryCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Boundary Lines File Corrupt.
        /// </summary>
        public static string gsBoundaryLineFilesAreCorrupt {
            get {
                return ResourceManager.GetString("gsBoundaryLineFilesAreCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Boundary Contour.
        /// </summary>
        public static string gsBoundaryMenu {
            get {
                return ResourceManager.GetString("gsBoundaryMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Brightness.
        /// </summary>
        public static string gsBrightness {
            get {
                return ResourceManager.GetString("gsBrightness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à But Field Is Loaded.
        /// </summary>
        public static string gsButFieldIsLoaded {
            get {
                return ResourceManager.GetString("gsButFieldIsLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel.
        /// </summary>
        public static string gsCancel {
            get {
                return ResourceManager.GetString("gsCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Centimeter.
        /// </summary>
        public static string gsCentimeters {
            get {
                return ResourceManager.GetString("gsCentimeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Charts.
        /// </summary>
        public static string gsCharts {
            get {
                return ResourceManager.GetString("gsCharts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Choose a different field.
        /// </summary>
        public static string gsChooseADifferentField {
            get {
                return ResourceManager.GetString("gsChooseADifferentField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Choose a different name.
        /// </summary>
        public static string gsChooseADifferentName {
            get {
                return ResourceManager.GetString("gsChooseADifferentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Choose or Build a Different one.
        /// </summary>
        public static string gsChooseBuildDifferentone {
            get {
                return ResourceManager.GetString("gsChooseBuildDifferentone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Click 2 Points on the boundary.
        /// </summary>
        public static string gsClick2Pointsontheboundary {
            get {
                return ResourceManager.GetString("gsClick2Pointsontheboundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Close.
        /// </summary>
        public static string gsClose {
            get {
                return ResourceManager.GetString("gsClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Close All Windows First.
        /// </summary>
        public static string gsCloseAllWindowsFirst {
            get {
                return ResourceManager.GetString("gsCloseAllWindowsFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Close Field First.
        /// </summary>
        public static string gsCloseFieldFirst {
            get {
                return ResourceManager.GetString("gsCloseFieldFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Colors.
        /// </summary>
        public static string gsColors {
            get {
                return ResourceManager.GetString("gsColors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Completely Delete Boundary.
        /// </summary>
        public static string gsCompletelyDeleteBoundary {
            get {
                return ResourceManager.GetString("gsCompletelyDeleteBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Contour File Corrupt.
        /// </summary>
        public static string gsContourFileIsCorrupt {
            get {
                return ResourceManager.GetString("gsContourFileIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Contour On.
        /// </summary>
        public static string gsContourOn {
            get {
                return ResourceManager.GetString("gsContourOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No Valid Path.
        /// </summary>
        public static string gsCouldntGenerateValidPath {
            get {
                return ResourceManager.GetString("gsCouldntGenerateValidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à % Coverage.
        /// </summary>
        public static string gsCoverage {
            get {
                return ResourceManager.GetString("gsCoverage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Create A Boundary First.
        /// </summary>
        public static string gsCreateABoundaryFirst {
            get {
                return ResourceManager.GetString("gsCreateABoundaryFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Create New Field.
        /// </summary>
        public static string gsCreateNewField {
            get {
                return ResourceManager.GetString("gsCreateNewField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Current (A).
        /// </summary>
        public static string gsCurrent {
            get {
                return ResourceManager.GetString("gsCurrent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Current (A).
        /// </summary>
        public static string gsCurrentSensorValueLabel {
            get {
                return ResourceManager.GetString("gsCurrentSensorValueLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Current Turn Sensor.
        /// </summary>
        public static string gsCurrentTurnSensor {
            get {
                return ResourceManager.GetString("gsCurrentTurnSensor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Current Vehicle.
        /// </summary>
        public static string gsCurrentVehicle {
            get {
                return ResourceManager.GetString("gsCurrentVehicle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Curve.
        /// </summary>
        public static string gsCurve {
            get {
                return ResourceManager.GetString("gsCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Curve Line File Corrupt.
        /// </summary>
        public static string gsCurveLineFileIsCorrupt {
            get {
                return ResourceManager.GetString("gsCurveLineFileIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Curve Not ON.
        /// </summary>
        public static string gsCurveNotOn {
            get {
                return ResourceManager.GetString("gsCurveNotOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delay (secs).
        /// </summary>
        public static string gsDelaySecs {
            get {
                return ResourceManager.GetString("gsDelaySecs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete.
        /// </summary>
        public static string gsDelete {
            get {
                return ResourceManager.GetString("gsDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete All Sections And Contours.
        /// </summary>
        public static string gsDeleteAllContoursAndSections {
            get {
                return ResourceManager.GetString("gsDeleteAllContoursAndSections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Applied Area.
        /// </summary>
        public static string gsDeleteAppliedArea {
            get {
                return ResourceManager.GetString("gsDeleteAppliedArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à This action will delete all the boundaries. Do you want to continue?.
        /// </summary>
        public static string gsDeleteBoundaryMapping {
            get {
                return ResourceManager.GetString("gsDeleteBoundaryMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Contour Paths.
        /// </summary>
        public static string gsDeleteContourPaths {
            get {
                return ResourceManager.GetString("gsDeleteContourPaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Field.
        /// </summary>
        public static string gsDeleteField {
            get {
                return ResourceManager.GetString("gsDeleteField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete For Sure?.
        /// </summary>
        public static string gsDeleteForSure {
            get {
                return ResourceManager.GetString("gsDeleteForSure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Directories.
        /// </summary>
        public static string gsDirectories {
            get {
                return ResourceManager.GetString("gsDirectories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Directory Exists.
        /// </summary>
        public static string gsDirectoryExists {
            get {
                return ResourceManager.GetString("gsDirectoryExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance.
        /// </summary>
        public static string gsDistance {
            get {
                return ResourceManager.GetString("gsDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance To Flag.
        /// </summary>
        public static string gsDistanceToFlag {
            get {
                return ResourceManager.GetString("gsDistanceToFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Drive Forward &gt; 1.5 kmh.
        /// </summary>
        public static string gsDriveForward {
            get {
                return ResourceManager.GetString("gsDriveForward", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Drive In.
        /// </summary>
        public static string gsDriveIn {
            get {
                return ResourceManager.GetString("gsDriveIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Drive Thru.
        /// </summary>
        public static string gsDriveThru {
            get {
                return ResourceManager.GetString("gsDriveThru", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Driving.
        /// </summary>
        public static string gsDriving {
            get {
                return ResourceManager.GetString("gsDriving", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à East.
        /// </summary>
        public static string gsEast {
            get {
                return ResourceManager.GetString("gsEast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Edit AB Curve.
        /// </summary>
        public static string gsEditABCurve {
            get {
                return ResourceManager.GetString("gsEditABCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Edit AB Line.
        /// </summary>
        public static string gsEditABLine {
            get {
                return ResourceManager.GetString("gsEditABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Edit Field Name.
        /// </summary>
        public static string gsEditFieldName {
            get {
                return ResourceManager.GetString("gsEditFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enable.
        /// </summary>
        public static string gsEnable {
            get {
                return ResourceManager.GetString("gsEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enable WorkSwitch.
        /// </summary>
        public static string gsEnableWorkSwitch {
            get {
                return ResourceManager.GetString("gsEnableWorkSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Counts.
        /// </summary>
        public static string gsEncoderCounts {
            get {
                return ResourceManager.GetString("gsEncoderCounts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enter Coordinates For Simulator.
        /// </summary>
        public static string gsEnterCoordinatesForSimulator {
            get {
                return ResourceManager.GetString("gsEnterCoordinatesForSimulator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enter Field Name.
        /// </summary>
        public static string gsEnterFieldName {
            get {
                return ResourceManager.GetString("gsEnterFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Enter Sim Coords.
        /// </summary>
        public static string gsEnterSimCoords {
            get {
                return ResourceManager.GetString("gsEnterSimCoords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Error.
        /// </summary>
        public static string gsError {
            get {
                return ResourceManager.GetString("gsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Error reading KML.
        /// </summary>
        public static string gsErrorreadingKML {
            get {
                return ResourceManager.GetString("gsErrorreadingKML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Extra Guides.
        /// </summary>
        public static string gsExtraGuides {
            get {
                return ResourceManager.GetString("gsExtraGuides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Field.
        /// </summary>
        public static string gsField {
            get {
                return ResourceManager.GetString("gsField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Field File is Corrupt.
        /// </summary>
        public static string gsFieldFileIsCorrupt {
            get {
                return ResourceManager.GetString("gsFieldFileIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Field Is Open.
        /// </summary>
        public static string gsFieldIsOpen {
            get {
                return ResourceManager.GetString("gsFieldIsOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Field Name.
        /// </summary>
        public static string gsFieldName {
            get {
                return ResourceManager.GetString("gsFieldName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Field Not Open.
        /// </summary>
        public static string gsFieldNotOpen {
            get {
                return ResourceManager.GetString("gsFieldNotOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à File Error.
        /// </summary>
        public static string gsFileError {
            get {
                return ResourceManager.GetString("gsFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Fix Trigger.
        /// </summary>
        public static string gsFixTrigger {
            get {
                return ResourceManager.GetString("gsFixTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Flag By Lat Lon.
        /// </summary>
        public static string gsFlagByLatLon {
            get {
                return ResourceManager.GetString("gsFlagByLatLon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Flag File Corrupt.
        /// </summary>
        public static string gsFlagFileIsCorrupt {
            get {
                return ResourceManager.GetString("gsFlagFileIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Floor Texture.
        /// </summary>
        public static string gsFloorTexture {
            get {
                return ResourceManager.GetString("gsFloorTexture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à For Now.
        /// </summary>
        public static string gsForNow {
            get {
                return ResourceManager.GetString("gsForNow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à From Existing.
        /// </summary>
        public static string gsFromExisting {
            get {
                return ResourceManager.GetString("gsFromExisting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à From KML.
        /// </summary>
        public static string gsFromKml {
            get {
                return ResourceManager.GetString("gsFromKml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Grid.
        /// </summary>
        public static string gsGrid {
            get {
                return ResourceManager.GetString("gsGrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Guidance Stopped.
        /// </summary>
        public static string gsGuidanceStopped {
            get {
                return ResourceManager.GetString("gsGuidanceStopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Heading Chart.
        /// </summary>
        public static string gsHeadingChart {
            get {
                return ResourceManager.GetString("gsHeadingChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Headland.
        /// </summary>
        public static string gsHeadland {
            get {
                return ResourceManager.GetString("gsHeadland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Create and Edit Headland.
        /// </summary>
        public static string gsHeadlandForm {
            get {
                return ResourceManager.GetString("gsHeadlandForm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Help.
        /// </summary>
        public static string gsHelp {
            get {
                return ResourceManager.GetString("gsHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hydraulic Lift Config.
        /// </summary>
        public static string gsHydraulicLiftConfig {
            get {
                return ResourceManager.GetString("gsHydraulicLiftConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hydraulic Lift Look Ahead (secs).
        /// </summary>
        public static string gsHydraulicLiftLookAhead {
            get {
                return ResourceManager.GetString("gsHydraulicLiftLookAhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à If Wrong Direction Tap Vehicle.
        /// </summary>
        public static string gsIfWrongDirectionTapVehicle {
            get {
                return ResourceManager.GetString("gsIfWrongDirectionTapVehicle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Inch.
        /// </summary>
        public static string gsInches {
            get {
                return ResourceManager.GetString("gsInches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Inner.
        /// </summary>
        public static string gsInner {
            get {
                return ResourceManager.GetString("gsInner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Inside/Outside.
        /// </summary>
        public static string gsInside_Outside {
            get {
                return ResourceManager.GetString("gsInside_Outside", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Motor Dir.
        /// </summary>
        public static string gsInvertMotorDir {
            get {
                return ResourceManager.GetString("gsInvertMotorDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Relays.
        /// </summary>
        public static string gsInvertRelays {
            get {
                return ResourceManager.GetString("gsInvertRelays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Roll.
        /// </summary>
        public static string gsInvertRoll {
            get {
                return ResourceManager.GetString("gsInvertRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert WAS.
        /// </summary>
        public static string gsInvertWAS {
            get {
                return ResourceManager.GetString("gsInvertWAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Keyboard.
        /// </summary>
        public static string gsKeyboard {
            get {
                return ResourceManager.GetString("gsKeyboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à kmh.
        /// </summary>
        public static string gsKMH {
            get {
                return ResourceManager.GetString("gsKMH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Language.
        /// </summary>
        public static string gsLanguage {
            get {
                return ResourceManager.GetString("gsLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Lightbar.
        /// </summary>
        public static string gsLightbar {
            get {
                return ResourceManager.GetString("gsLightbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Line.
        /// </summary>
        public static string gsLine {
            get {
                return ResourceManager.GetString("gsLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Load.
        /// </summary>
        public static string gsLoad {
            get {
                return ResourceManager.GetString("gsLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à LogNMEA.
        /// </summary>
        public static string gsLogNMEA {
            get {
                return ResourceManager.GetString("gsLogNMEA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Lower Time (secs).
        /// </summary>
        public static string gsLowerTime {
            get {
                return ResourceManager.GetString("gsLowerTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Machine Module.
        /// </summary>
        public static string gsMachineModule {
            get {
                return ResourceManager.GetString("gsMachineModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Machine Port.
        /// </summary>
        public static string gsMachinePort {
            get {
                return ResourceManager.GetString("gsMachinePort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Make Boundary Contours.
        /// </summary>
        public static string gsMakeBoundaryContours {
            get {
                return ResourceManager.GetString("gsMakeBoundaryContours", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Manual.
        /// </summary>
        public static string gsManual {
            get {
                return ResourceManager.GetString("gsManual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Meters.
        /// </summary>
        public static string gsMeters {
            get {
                return ResourceManager.GetString("gsMeters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Missing ABLInes File.
        /// </summary>
        public static string gsMissingABLinesFile {
            get {
                return ResourceManager.GetString("gsMissingABLinesFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Missing Boundary File.
        /// </summary>
        public static string gsMissingBoundaryFile {
            get {
                return ResourceManager.GetString("gsMissingBoundaryFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Missing Contour File.
        /// </summary>
        public static string gsMissingContourFile {
            get {
                return ResourceManager.GetString("gsMissingContourFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Missing Flag File.
        /// </summary>
        public static string gsMissingFlagsFile {
            get {
                return ResourceManager.GetString("gsMissingFlagsFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Missing Section File.
        /// </summary>
        public static string gsMissingSectionFile {
            get {
                return ResourceManager.GetString("gsMissingSectionFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à mph.
        /// </summary>
        public static string gsMPH {
            get {
                return ResourceManager.GetString("gsMPH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à NEast.
        /// </summary>
        public static string gsN_East {
            get {
                return ResourceManager.GetString("gsN_East", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à NWest.
        /// </summary>
        public static string gsN_West {
            get {
                return ResourceManager.GetString("gsN_West", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à # Of Sections.
        /// </summary>
        public static string gsNbOfSections {
            get {
                return ResourceManager.GetString("gsNbOfSections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à New.
        /// </summary>
        public static string gsNew {
            get {
                return ResourceManager.GetString("gsNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No ABLine Active.
        /// </summary>
        public static string gsNoABLineActive {
            get {
                return ResourceManager.GetString("gsNoABLineActive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No Boundary.
        /// </summary>
        public static string gsNoBoundary {
            get {
                return ResourceManager.GetString("gsNoBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No Fields Found.
        /// </summary>
        public static string gsNoFieldsFound {
            get {
                return ResourceManager.GetString("gsNoFieldsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No Guidance Lines.
        /// </summary>
        public static string gsNoGuidanceLines {
            get {
                return ResourceManager.GetString("gsNoGuidanceLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à None.
        /// </summary>
        public static string gsNone {
            get {
                return ResourceManager.GetString("gsNone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à None Used.
        /// </summary>
        public static string gsNoneUsed {
            get {
                return ResourceManager.GetString("gsNoneUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à North.
        /// </summary>
        public static string gsNorth {
            get {
                return ResourceManager.GetString("gsNorth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à No Settings With IMU.
        /// </summary>
        public static string gsNoSettingsWithIMU {
            get {
                return ResourceManager.GetString("gsNoSettingsWithIMU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Nothing Deleted.
        /// </summary>
        public static string gsNothingDeleted {
            get {
                return ResourceManager.GetString("gsNothingDeleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Off (secs).
        /// </summary>
        public static string gsOffSecs {
            get {
                return ResourceManager.GetString("gsOffSecs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Offset.
        /// </summary>
        public static string gsOffset {
            get {
                return ResourceManager.GetString("gsOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Offset Fix.
        /// </summary>
        public static string gsOffsetFix {
            get {
                return ResourceManager.GetString("gsOffsetFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à On (secs).
        /// </summary>
        public static string gsOnSecs {
            get {
                return ResourceManager.GetString("gsOnSecs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Open.
        /// </summary>
        public static string gsOpen {
            get {
                return ResourceManager.GetString("gsOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Outer.
        /// </summary>
        public static string gsOuter {
            get {
                return ResourceManager.GetString("gsOuter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Overlap / Gap.
        /// </summary>
        public static string gsOverlap_Gap {
            get {
                return ResourceManager.GetString("gsOverlap_Gap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Overshoot Reduction.
        /// </summary>
        public static string gsOvershootReduction {
            get {
                return ResourceManager.GetString("gsOvershootReduction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pass #.
        /// </summary>
        public static string gsPass {
            get {
                return ResourceManager.GetString("gsPass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Passes.
        /// </summary>
        public static string gsPasses {
            get {
                return ResourceManager.GetString("gsPasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Past End Of Curve.
        /// </summary>
        public static string gsPastEndOfCurve {
            get {
                return ResourceManager.GetString("gsPastEndOfCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pause.
        /// </summary>
        public static string gsPause {
            get {
                return ResourceManager.GetString("gsPause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Please Enter ABLine.
        /// </summary>
        public static string gsPleaseEnterABLine {
            get {
                return ResourceManager.GetString("gsPleaseEnterABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Polygon.
        /// </summary>
        public static string gsPolygon {
            get {
                return ResourceManager.GetString("gsPolygon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pressure (bar).
        /// </summary>
        public static string gsPressureSensorValueLabel {
            get {
                return ResourceManager.GetString("gsPressureSensorValueLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pressure Turn Sensor.
        /// </summary>
        public static string gsPressureTurnSensor {
            get {
                return ResourceManager.GetString("gsPressureTurnSensor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Problem Making Path.
        /// </summary>
        public static string gsProblemMakingPath {
            get {
                return ResourceManager.GetString("gsProblemMakingPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Program Will Exit Please Restart.
        /// </summary>
        public static string gsProgramWillExitPleaseRestart {
            get {
                return ResourceManager.GetString("gsProgramWillExitPleaseRestart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Raise Time (secs).
        /// </summary>
        public static string gsRaiseTime {
            get {
                return ResourceManager.GetString("gsRaiseTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Really Reset Everything.
        /// </summary>
        public static string gsReallyResetEverything {
            get {
                return ResourceManager.GetString("gsReallyResetEverything", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Record.
        /// </summary>
        public static string gsRecord {
            get {
                return ResourceManager.GetString("gsRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Recorded Path File Corrupt.
        /// </summary>
        public static string gsRecordedPathFileIsCorrupt {
            get {
                return ResourceManager.GetString("gsRecordedPathFileIsCorrupt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Recorded Path.
        /// </summary>
        public static string gsRecordedPathMenu {
            get {
                return ResourceManager.GetString("gsRecordedPathMenu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Remove Offset.
        /// </summary>
        public static string gsRemoveOffset {
            get {
                return ResourceManager.GetString("gsRemoveOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reset All.
        /// </summary>
        public static string gsResetAll {
            get {
                return ResourceManager.GetString("gsResetAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reset All For Sure?.
        /// </summary>
        public static string gsResetAllForSure {
            get {
                return ResourceManager.GetString("gsResetAllForSure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reset Direction.
        /// </summary>
        public static string gsResetDirection {
            get {
                return ResourceManager.GetString("gsResetDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Resume.
        /// </summary>
        public static string gsResume {
            get {
                return ResourceManager.GetString("gsResume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Roll Filter.
        /// </summary>
        public static string gsRollFilter {
            get {
                return ResourceManager.GetString("gsRollFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SE.
        /// </summary>
        public static string gsS_East {
            get {
                return ResourceManager.GetString("gsS_East", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SW.
        /// </summary>
        public static string gsS_West {
            get {
                return ResourceManager.GetString("gsS_West", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save and Return.
        /// </summary>
        public static string gsSaveAndReturn {
            get {
                return ResourceManager.GetString("gsSaveAndReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save As.
        /// </summary>
        public static string gsSaveAs {
            get {
                return ResourceManager.GetString("gsSaveAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save New Vehicle.
        /// </summary>
        public static string gsSaveNewVehicle {
            get {
                return ResourceManager.GetString("gsSaveNewVehicle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sections Buttons.
        /// </summary>
        public static string gsSectionsButtons {
            get {
                return ResourceManager.GetString("gsSectionsButtons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Section Width.
        /// </summary>
        public static string gsSectionWidth {
            get {
                return ResourceManager.GetString("gsSectionWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Send + Save.
        /// </summary>
        public static string gsSendSave {
            get {
                return ResourceManager.GetString("gsSendSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sent To Machine Module.
        /// </summary>
        public static string gsSentToMachineModule {
            get {
                return ResourceManager.GetString("gsSentToMachineModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à SetPoint.
        /// </summary>
        public static string gsSetPoint {
            get {
                return ResourceManager.GetString("gsSetPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Shift GPS Position (cm).
        /// </summary>
        public static string gsShiftGPSPosition {
            get {
                return ResourceManager.GetString("gsShiftGPSPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Simulator On.
        /// </summary>
        public static string gsSimulatorOn {
            get {
                return ResourceManager.GetString("gsSimulatorOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Single Antenna Settings.
        /// </summary>
        public static string gsSingleAntennaSettings {
            get {
                return ResourceManager.GetString("gsSingleAntennaSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sky.
        /// </summary>
        public static string gsSky {
            get {
                return ResourceManager.GetString("gsSky", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Slow Down Below.
        /// </summary>
        public static string gsSlowDownBelow {
            get {
                return ResourceManager.GetString("gsSlowDownBelow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Smooth AB Curve.
        /// </summary>
        public static string gsSmoothABCurve {
            get {
                return ResourceManager.GetString("gsSmoothABCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sort.
        /// </summary>
        public static string gsSort {
            get {
                return ResourceManager.GetString("gsSort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à South.
        /// </summary>
        public static string gsSouth {
            get {
                return ResourceManager.GetString("gsSouth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Spacing (cm).
        /// </summary>
        public static string gsSpacing {
            get {
                return ResourceManager.GetString("gsSpacing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Speedo.
        /// </summary>
        public static string gsSpeedo {
            get {
                return ResourceManager.GetString("gsSpeedo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Start or Delete A Boundary.
        /// </summary>
        public static string gsStartDeleteABoundary {
            get {
                return ResourceManager.GetString("gsStartDeleteABoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à StartFullscreen.
        /// </summary>
        public static string gsStartFullscreen {
            get {
                return ResourceManager.GetString("gsStartFullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Start New Field.
        /// </summary>
        public static string gsStartNewField {
            get {
                return ResourceManager.GetString("gsStartNewField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Start Speed (Kmh).
        /// </summary>
        public static string gsStartSpeed {
            get {
                return ResourceManager.GetString("gsStartSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Charts.
        /// </summary>
        public static string gsSteerChart {
            get {
                return ResourceManager.GetString("gsSteerChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Wizard.
        /// </summary>
        public static string gsSteerWizard {
            get {
                return ResourceManager.GetString("gsSteerWizard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stop Record Pause Boundary.
        /// </summary>
        public static string gsStopRecordPauseBoundary {
            get {
                return ResourceManager.GetString("gsStopRecordPauseBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à To File.
        /// </summary>
        public static string gsToFile {
            get {
                return ResourceManager.GetString("gsToFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Too Fast.
        /// </summary>
        public static string gsTooFast {
            get {
                return ResourceManager.GetString("gsTooFast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tool Width.
        /// </summary>
        public static string gsToolWidth {
            get {
                return ResourceManager.GetString("gsToolWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Top Field View.
        /// </summary>
        public static string gsTopFieldView {
            get {
                return ResourceManager.GetString("gsTopFieldView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Track.
        /// </summary>
        public static string gsTrack {
            get {
                return ResourceManager.GetString("gsTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Lines.
        /// </summary>
        public static string gsTramLines {
            get {
                return ResourceManager.GetString("gsTramLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Type.
        /// </summary>
        public static string gsTramType {
            get {
                return ResourceManager.GetString("gsTramType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Width.
        /// </summary>
        public static string gsTramWidth {
            get {
                return ResourceManager.GetString("gsTramWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn AB Curve On.
        /// </summary>
        public static string gsTurnABCurveOn {
            get {
                return ResourceManager.GetString("gsTurnABCurveOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn off Auto Section Control.
        /// </summary>
        public static string gsTurnoffAutoSectionControl {
            get {
                return ResourceManager.GetString("gsTurnoffAutoSectionControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn On Contour of Make AB Line.
        /// </summary>
        public static string gsTurnOnContourOrMakeABLine {
            get {
                return ResourceManager.GetString("gsTurnOnContourOrMakeABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn Radius.
        /// </summary>
        public static string gsTurnRadius {
            get {
                return ResourceManager.GetString("gsTurnRadius", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn Sensor.
        /// </summary>
        public static string gsTurnSensor {
            get {
                return ResourceManager.GetString("gsTurnSensor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Units.
        /// </summary>
        public static string gsUnits {
            get {
                return ResourceManager.GetString("gsUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Use Selected.
        /// </summary>
        public static string gsUseSelected {
            get {
                return ResourceManager.GetString("gsUseSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicle Type.
        /// </summary>
        public static string gsVehicleType {
            get {
                return ResourceManager.GetString("gsVehicleType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à WebCam.
        /// </summary>
        public static string gsWebCam {
            get {
                return ResourceManager.GetString("gsWebCam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à West.
        /// </summary>
        public static string gsWest {
            get {
                return ResourceManager.GetString("gsWest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Wheelbase.
        /// </summary>
        public static string gsWheelbase {
            get {
                return ResourceManager.GetString("gsWheelbase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Windows Still Open.
        /// </summary>
        public static string gsWindowsStillOpen {
            get {
                return ResourceManager.GetString("gsWindowsStillOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Wizards.
        /// </summary>
        public static string gsWizards {
            get {
                return ResourceManager.GetString("gsWizards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Work Switch Active Low.
        /// </summary>
        public static string gsWorkSwActiveLow {
            get {
                return ResourceManager.GetString("gsWorkSwActiveLow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à WorkSwitch.
        /// </summary>
        public static string gsWorkSwitch {
            get {
                return ResourceManager.GetString("gsWorkSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à WorkSwitch Controls Manual.
        /// </summary>
        public static string gsWorkSwitchControlsManual {
            get {
                return ResourceManager.GetString("gsWorkSwitchControlsManual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à XTE Chart.
        /// </summary>
        public static string gsXTEChart {
            get {
                return ResourceManager.GetString("gsXTEChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Zero Roll.
        /// </summary>
        public static string gsZeroRoll {
            get {
                return ResourceManager.GetString("gsZeroRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 2D View Button..
        /// </summary>
        public static string h_btn2D {
            get {
                return ResourceManager.GetString("h_btn2D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à 3D View Button..
        /// </summary>
        public static string h_btn3D {
            get {
                return ResourceManager.GetString("h_btn3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AB Draw Button
        ///
        ///ABDraw only is available with a boundary created. It brings up a new form to click on the perimeter to create Lines, Curves, and a full perimeter guidance line. All lines can be named, deleted, and moved.  Handy for seeing all the guidance lines created..
        /// </summary>
        public static string h_btnABDraw {
            get {
                return ResourceManager.GetString("h_btnABDraw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à ABLine Button
        ///
        ///ABLine guidance is repeating straight parallel lines across the field. Pushing the button enable AB guidance if a line exists, or if none, brings up the create/edit form where lines can be created either by 2 points with a line intersecting both or a single point and direction or heading. Lines to the right count positive upward and lines to the left are counted up as negative. .
        /// </summary>
        public static string h_btnABLine {
            get {
                return ResourceManager.GetString("h_btnABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Auto Steer Button
        ///
        ///Turns on and off Auto Steer steering control. You must have an active guidance line set. Pressing UTurn button can also turn on AutoSteer. In Config/Guidance you can set features and button function..
        /// </summary>
        public static string h_btnAutoSteer {
            get {
                return ResourceManager.GetString("h_btnAutoSteer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AutoSteer Angle and Settings Button
        ///
        ///Display Steer Angles and Configure AutoSteer settings.
        /// </summary>
        public static string h_btnAutoSteerConfig {
            get {
                return ResourceManager.GetString("h_btnAutoSteerConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à U Turn Button
        ///
        ///If guidance line is available you can auto turn around at the headland. You can set distance from edge of field to start turning, the diameter and type of turn. Pressing this button also enables autosteer and U Turn if both are off..
        /// </summary>
        public static string h_btnAutoYouTurn {
            get {
                return ResourceManager.GetString("h_btnAutoYouTurn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Change Mapping Color Button
        ///
        ///Brings up the color picker to choose a color to draw where you have applied. You can change as often as you like, but you need to travel a ways before the color changes, or turn off and on sections then the color change will be immediate..
        /// </summary>
        public static string h_btnChangeMappingColor {
            get {
                return ResourceManager.GetString("h_btnChangeMappingColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Main Configuration Button
        ///
        ///Most of the settings are here. As you make changes they are automatically saved. Careful though as there is no cancel..
        /// </summary>
        public static string h_btnConfig {
            get {
                return ResourceManager.GetString("h_btnConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Contour Button
        ///
        ///To be able to follow guidance beside your last pass. If ABLine and ABCurve are on, you can turn on and off Contour while one of those functions are still on switching between them..
        /// </summary>
        public static string h_btnContour {
            get {
                return ResourceManager.GetString("h_btnContour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Curve Guidance Button
        ///
        ///Curve guidance allows you to follow any shape in lines repeating across the field. The lines are like contour lines where the last pass follows the curvature of the previous, but any variations made are not carried to the next line. Pressing the button brings up the Curve Creation/Edit form or if a curve line exists it brings that up. Pressing it again allows you to copy/edit/create more lines..
        /// </summary>
        public static string h_btnCurve {
            get {
                return ResourceManager.GetString("h_btnCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cycle Through Lines Button
        ///
        ///Allows you to cycle or step through existing lines of the mode you currently have selected. Cycle all ABLines or all Curve Lines available. Disabled if no lines are made..
        /// </summary>
        public static string h_btnCycleLines {
            get {
                return ResourceManager.GetString("h_btnCycleLines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Day or Night Colors Button..
        /// </summary>
        public static string h_btnDayNightMode {
            get {
                return ResourceManager.GetString("h_btnDayNightMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance and Area Button
        ///
        ///Shows user distance travelled and accumulated area marked. Touch the digits to reset to zero. Will be remembered when exiting the program and starting again.
        /// </summary>
        public static string h_btnDistanceArea {
            get {
                return ResourceManager.GetString("h_btnDistanceArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Edit Guidance Line Button
        ///
        ///If there is an active guidance line available to edit, this will bring up the form to edit the line. It is the same button for either curve or line and brings up the correct form depending on which one you are using at the time. To copy or create new guidance lines press the ABLine or AB Curve button..
        /// </summary>
        public static string h_btnEditAB {
            get {
                return ResourceManager.GetString("h_btnEditAB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Localized fertilization management button
        /// 
        ///[Still under development by Maxime E] Opens a menu to configure fertilization management..
        /// </summary>
        public static string h_btnFerti {
            get {
                return ResourceManager.GetString("h_btnFerti", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Flag Mark Button
        ///
        ///Make a flag mark on the field surface. You can right click or long push to bring up a small menu to select either red green or yellow colored flags. Creating a flag brings up an edit box to allow you to add notes, it also shows what number flag was made..
        /// </summary>
        public static string h_btnFlag {
            get {
                return ResourceManager.GetString("h_btnFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Free Drive Button
        ///
        ///Allows you to test the autosteer hardware manually. Control the autosteer even if we don&apos;t have a line, drive straight.
        ///We can change the angle with the arrows..
        /// </summary>
        public static string h_btnFreeDrive {
            get {
                return ResourceManager.GetString("h_btnFreeDrive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Drive Steer Angle Zero
        ///
        ///Set steer angle to zero, or if it is zero sets angle to plus 5. Good for testing the steer response..
        /// </summary>
        public static string h_btnFreeDriveZero {
            get {
                return ResourceManager.GetString("h_btnFreeDriveZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Headland On Off Button
        ///
        ///Once a headland is created you can turn the headland on and off with this button. When off, section control no longer stops at headland. You can disable section control turning off at the headland in the headland create/edit form from the field menu. .
        /// </summary>
        public static string h_btnHeadlandOnOff {
            get {
                return ResourceManager.GetString("h_btnHeadlandOnOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hydraulic Lift On Off Button
        ///
        ///Once a headland is active, and headland control is on, you can also turn on tool lift control to raise the tool when entering the headland and lower it again just before leaving it to the work area. This button is only visible with a headland created and on..
        /// </summary>
        public static string h_btnHydLift {
            get {
                return ResourceManager.GetString("h_btnHydLift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Lock to Line
        ///
        ///Locks to current contour line till you get to the end of it. Ignores all other lines..
        /// </summary>
        public static string h_btnLockToContour {
            get {
                return ResourceManager.GetString("h_btnLockToContour", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Manual Section Control Button
        ///
        ///To turn sections off and on manually. No section control is performed, does not matter what is currently applied or not, inside or outside boundaries..
        /// </summary>
        public static string h_btnManualOffOn {
            get {
                return ResourceManager.GetString("h_btnManualOffOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pointing North and Flat 2D view.
        /// </summary>
        public static string h_btnN2D {
            get {
                return ResourceManager.GetString("h_btnN2D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pointing North and Flat 3D view.
        /// </summary>
        public static string h_btnN3D {
            get {
                return ResourceManager.GetString("h_btnN3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à U Turn Row Skips
        ///
        ///Select how many passes to skip when using U Turn. .
        /// </summary>
        public static string h_btnRowWidthSkips {
            get {
                return ResourceManager.GetString("h_btnRowWidthSkips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Auto Section Control Off On Button
        ///
        ///Automatic section control turns sections on if area not applied and off if area already applied. It will turn off outside of boundaries. You can set how early or how late the sections are controlled in Config/Sections.
        /// </summary>
        public static string h_btnSectionOffAutoOn {
            get {
                return ResourceManager.GetString("h_btnSectionOffAutoOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Snap Line to Pivot Button
        ///
        ///Pressing Snap button moves the line to the vehicle pivot point. The line change of position is not saved. If you want to save the line, Use the Edit AB button where you can save the new position permanently. Snap works in Curve and AB Line but not in Contour..
        /// </summary>
        public static string h_btnSnapToPivot {
            get {
                return ResourceManager.GetString("h_btnSnapToPivot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stanley or Pure Pursuit Steering Mode
        ///
        ///Select the mode you wish to use. Stanley uses the front of the vehicle to reference how quickly to steer to the line. The pivot just follows along trailing not on the line. Good for a swather or harvester, but not so good for attached tools. 
        ///Pure Pursuit uses the pivot point to determine steering corrections and tries to correct heading and off track error to get on the line. The integral also varies heading to force the pivot to the line so on slopes or side draft [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string h_btnStanleyPure {
            get {
                return ResourceManager.GetString("h_btnStanleyPure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Start the AgIO Application Button
        ///
        ///If AgIO is already running, button does nothing, but if AgIO is not running it will start it. AgIO is responsible for all serial and UDP input output for AgOpenGPS..
        /// </summary>
        public static string h_btnStartAgIO {
            get {
                return ResourceManager.GetString("h_btnStartAgIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Angle Calculator
        ///
        ///Function to calculate the real steering angle, drive steady in a circle slowly, click start, and it will
        ///show the angle when finished. The difference between left and right shows Ackerman error. Adjust Ackermann angle so left turn is the same as right turn..
        /// </summary>
        public static string h_btnStartSA {
            get {
                return ResourceManager.GetString("h_btnStartSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Angle Down Button
        ///
        ///Turns more to the left. Lowers the Free Drive steering angle..
        /// </summary>
        public static string h_btnSteerAngleDown {
            get {
                return ResourceManager.GetString("h_btnSteerAngleDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Angle Up Button
        ///
        ///Turns more to the right. Raises the Free Drive steering angle..
        /// </summary>
        public static string h_btnSteerAngleUp {
            get {
                return ResourceManager.GetString("h_btnSteerAngleUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tilt the view Downward Button.
        /// </summary>
        public static string h_btnTiltDown {
            get {
                return ResourceManager.GetString("h_btnTiltDown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tilt the view upward button.
        /// </summary>
        public static string h_btnTiltUp {
            get {
                return ResourceManager.GetString("h_btnTiltUp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Line Display Mode Button
        ///
        ///If there are tram lines active, you can select all trams or inner or outer or none visible. Trams are made by pressing field menu and then selecting tramlines..
        /// </summary>
        public static string h_btnTramDisplayMode {
            get {
                return ResourceManager.GetString("h_btnTramDisplayMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à U Turn Skip Enable
        ///
        ///Allows automatic looping based on number set in Row skips to do as a group of passes, then move on to next group automatically..
        /// </summary>
        public static string h_btnYouSkipEnable {
            get {
                return ResourceManager.GetString("h_btnYouSkipEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Wheel Angle Sensor Zero Button
        ///
        ///Allows the steering angle to be zero degrees when driving
        ///forward. This setting must be done and be zero degrees when
        ///driving straight ahead in order to be properly set. Wheel Angle
        ///Sensor (WAS) zero allows you to remove that non-zero steering
        ///angle so it is zero degrees. This is a very important setting and
        ///must be accurately set..
        /// </summary>
        public static string h_btnZeroWAS {
            get {
                return ResourceManager.GetString("h_btnZeroWAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Zoom in to see less field button.
        /// </summary>
        public static string h_btnZoomIn {
            get {
                return ResourceManager.GetString("h_btnZoomIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Zoom out to see more field button.
        /// </summary>
        public static string h_btnZoomOut {
            get {
                return ResourceManager.GetString("h_btnZoomOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à First 3 numbers are Total Field Area minus Actual covered area
        ///Then the percent of actual area overlapped
        ///Then the Total Area minus machine travelled area. 
        ///Time till finished based on work area
        ///Percent completed and work rate..
        /// </summary>
        public static string h_FieldData {
            get {
                return ResourceManager.GetString("h_FieldData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Ackerman Compensation Slider
        ///
        ///Ackermann steering geometry is a geometric arrangement of
        ///linkages in the steering of a vehicle designed to solve the problem
        ///of wheels on the inside and outside of a turn needing to trace out
        ///circles of different radius.
        ///The setting is based on reference of the right wheel where the left wheel angle is determined by multiplying the steering wheel angle by the percentage Ackermann is set to. 
        ///Ackermann has no effect on steer angle when turning right, only left.
        ///
        ///Exampl [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string h_hsbarAckerman {
            get {
                return ResourceManager.GetString("h_hsbarAckerman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Counts Per Degree Slider
        ///
        ///Also known as CPD
        ///The A/D converter puts out -4000 to +4000 (8000 in total) levels
        ///as the Wheel Angle Sensor puts out 0 to 5v. To convert that into
        ///steer angle degrees - because we don’t visualize counts very well,
        ///we now divide those levels by counts per degree. So, when the
        ///CPD is increased, the wheels turn farther for each degree needed.
        ///When lowered, the wheels don’t turn as far. This is a critical setting, 
        ///if the vehicle steers too far lower the CPD and vice versa..
        /// </summary>
        public static string h_hsbarCountsPerDegree {
            get {
                return ResourceManager.GetString("h_hsbarCountsPerDegree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stanley Heading Slider
        ///
        ///The slider affects how much opposition to distance setting
        ///there is by keeping the vehicle turning away from the line.
        ///It’s the winner of the two, heading and distance away that
        ///determines the length of time to get to the line. Ideal is to
        ///balance them so you get quickly to the line without going too far
        ///over the line or oscillating back and forth (too aggressive)..
        /// </summary>
        public static string h_hsbarHeadingErrorGain {
            get {
                return ResourceManager.GetString("h_hsbarHeadingErrorGain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Maximum PWM Gain Slider
        ///
        ///Limits the total power deliver to steer motor or valve to prevent steering too violently.
        ///Initially set lower to prevent oscillation. If driving fast be sure to not turn too fast to prevent roll over..
        /// </summary>
        public static string h_hsbarHighSteerPWM {
            get {
                return ResourceManager.GetString("h_hsbarHighSteerPWM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hold Look Ahead Slider
        ///
        ///How far ahead the algorithm looks to at the reference point to decide if it is wandering off line. When distance to line is &lt;10cm, system is in &quot;Hold&quot; mode. Otherwise, it is acquiring. If it is slow to realise it is losing the line, decrease this. If it constantly over-correcting at less than 10cm, increase this..
        /// </summary>
        public static string h_hsbarHoldLookAhead {
            get {
                return ResourceManager.GetString("h_hsbarHoldLookAhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stanley Integral Slider
        ///
        ///Integral setting allows the distance error to keep adding up over time to help add steer angle when a normal distance and heading calculation won&apos;t bring the tractor to the line.
        ///Like on a sidehill or pulling heavy draft to one side. Too much integral will cause it to get too fast to the line and cross over it.
        ///Too low of a setting will take too long to get to the line.
        ///Better to set a bit lower or it will oscillate across line a lot..
        /// </summary>
        public static string h_hsbarIntegral {
            get {
                return ResourceManager.GetString("h_hsbarIntegral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pure Pursuit Integral Slider
        ///
        ///Integral setting allows the distance error to keep adding up over time to help add steer angle when a normal distance and heading calculation won&apos;t bring the tractor to the line.
        ///Like on a sidehill or pulling heavy draft to one side. Too much integral will cause it to get too fast to the line and cross over it.
        ///Too low of a setting will take too long to get to the line.
        ///Better to set a bit lower or it will oscillate across line a lot..
        /// </summary>
        public static string h_hsbarIntegralPurePursuit {
            get {
                return ResourceManager.GetString("h_hsbarIntegralPurePursuit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Look Ahead Slider
        ///
        ///How far ahead of the vehicle is the reference point. If point is close vehicle turns very quickly.
        ///Farther away the steering is more relaxed and takes longer to get to line. Use the Speed gain to set distance based on speed as it takes less steering when you go faster. But set lookahead first. 
        ///Tune it at the speed you will most often be travelling. .
        /// </summary>
        public static string h_hsbarLookAhead {
            get {
                return ResourceManager.GetString("h_hsbarLookAhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Look Ahead Speed Gain Slider
        ///
        ///The faster you drive, the faster you get to the line. 
        ///This slider sets how quickly the reference point moves away from you as your speed increases and reduces the steer angle so it doesn&apos;t turn as fast preventing going back and forth across the line..
        /// </summary>
        public static string h_hsbarLookAheadMult {
            get {
                return ResourceManager.GetString("h_hsbarLookAheadMult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Low Steer Angle PWM
        ///
        ///As the vehicle gets closer to the line, the gain is reduced linearly
        ///from the max value to the low value. This helps it overshoot the
        ///line when close, but provide rapid movement when further away..
        /// </summary>
        public static string h_hsbarLowSteerPWM {
            get {
                return ResourceManager.GetString("h_hsbarLowSteerPWM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Max Steer Angle Slider
        ///
        ///The maximum left and right steer angle autosteer will provide. Initially a low setting here will help you not drive all over the place with wild steer angles. 
        ///You do need a high value to steer around U Turns that are quite small and require a sharp turn. .
        /// </summary>
        public static string h_hsbarMaxSteerAngle {
            get {
                return ResourceManager.GetString("h_hsbarMaxSteerAngle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Minimum PWM Sider
        ///
        ///Minimum PWM value is used to apply a minimum amount of
        ///power to overcome friction of the valve/motor. Too high and it will turn all the time, 
        ///too low and there will be a delay as pwm increases before the steering happens. 
        ///The more proportional gain, the more sensitive this setting..
        /// </summary>
        public static string h_hsbarMinPWM {
            get {
                return ResourceManager.GetString("h_hsbarMinPWM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Proportional Gain Slider
        ///
        ///The proportional gain is multiplied by the distance error then added to
        ///the minimum PWM value to generate the final output value. The
        ///higher this value the faster the motor will correct the steering.
        ///However, if it is too high, the steering will overshoot the line and
        ///then oversteer the other way again called oscillate. Too low of a value and it will
        ///either take too long or never get to the guidance line. A critical setting that 
        ///takes some experimenting to see its effect.  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string h_hsbarProportionalGain {
            get {
                return ResourceManager.GetString("h_hsbarProportionalGain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sidehill Compensation Slider
        ///
        ///Adds a static steer angle based on roll angle to turn the wheels to compensate for the side draft of hills. You can make the vehicle go above the line with this setting allowing the tool to follow better as well..
        /// </summary>
        public static string h_hsbarSideHillComp {
            get {
                return ResourceManager.GetString("h_hsbarSideHillComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stanley Distance Slider
        ///
        ///The slider works with distance. The more aggressive the
        ///faster it tries to steer towards the line with the risk of crossing
        ///over the line. The heading slider tries to dampen this effect..
        /// </summary>
        public static string h_hsbarStanleyGain {
            get {
                return ResourceManager.GetString("h_hsbarStanleyGain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Wheel Angle Sensor Zero Slider
        ///
        ///Moving this slider changes the zero position for steering angle. Drive in free drive mode and adjust this so you are going straight out. 
        ///This is a critical setting.
        /// </summary>
        public static string h_hsbarWasOffset {
            get {
                return ResourceManager.GetString("h_hsbarWasOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AutoSteer Integral Value
        ///
        ///Display only. This value shows the amount of additional steering angle to bring the vehicle closer to the guidance line..
        /// </summary>
        public static string h_lblIntegral {
            get {
                return ResourceManager.GetString("h_lblIntegral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Lateral Shift Touch
        ///
        ///Touching this area allows the vehicle to shift left or right to next guidance line. You can touch more then once and shift over multiple lines. Touching the other arrow allows you to reduce the number of shifts over..
        /// </summary>
        public static string h_lblLateralTurnTouch {
            get {
                return ResourceManager.GetString("h_lblLateralTurnTouch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Manual Turn and Cancel Touch
        ///
        ///You can initiate a manual U Turn or cancel it if you are already in a manual turn. When driving in normal auto U Turn touching one of these jumps to the next line and turns around..
        /// </summary>
        public static string h_lblManualTurnCancelTouch {
            get {
                return ResourceManager.GetString("h_lblManualTurnCancelTouch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Speed Indicator
        ///
        ///Dual purpose label. Shows the speed of the vehicle and also tapping the value brings up the GPS Data form showing all the GPS information..
        /// </summary>
        public static string h_lblSpeed {
            get {
                return ResourceManager.GetString("h_lblSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Information Indicator
        ///
        ///Graphic shows steering angle as well as the color shows auto steer status.....
        ///
        ///Purple - Steer module not connected.
        ///Red - Steer module connected, not enabled.
        ///Orange - Steer Module connected and enabled, steer switch is off
        ///Green - Connected, enabled, and auto steering. Fully functional..
        /// </summary>
        public static string h_lblSteerCircleTouch {
            get {
                return ResourceManager.GetString("h_lblSteerCircleTouch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à This area shows the distance to the start of the next U Turn. There are normally 2 functions here. When not in a U Turn, touching this area allows you to now turn the opposite direction. If you are doing a U Turn then touching this area cancels the U Turn - so be careful and grab the wheel..
        /// </summary>
        public static string h_lblSwapDirectionCancel {
            get {
                return ResourceManager.GetString("h_lblSwapDirectionCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à How many NMEA messages have been missed or too late from AgIO.
        /// </summary>
        public static string h_lbludpWatchCounts {
            get {
                return ResourceManager.GetString("h_lbludpWatchCounts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Swap Direction Touch
        ///
        ///Touch here if the vehicle is pointing backwards while travelling forwards. Without dual heading you don&apos;t know if you are backing up or going forward. Backing up is position to position like going forward but 180 degrees is added to your heading to make it look like you are backing up. At times, like turning sharp when going slow the direction can get confused and this resets that direction. Drive forward and touch this area to tell AOG which way forward is. Can be touched at any tim [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string h_lblVehicleDirectionResetTouch {
            get {
                return ResourceManager.GetString("h_lblVehicleDirectionResetTouch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Add Time
        ///
        ///Adds a time stamp to the current line name. Helps make the name unique as well..
        /// </summary>
        public static string ha_btnAddTime {
            get {
                return ResourceManager.GetString("ha_btnAddTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à A Point
        ///
        ///This is the first point of the line. It is also used for the base point of A plus heading. 
        ///
        ///Once A is touched, you can either touch B point or enter in the heading..
        /// </summary>
        public static string ha_btnAPoint {
            get {
                return ResourceManager.GetString("ha_btnAPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à B Point
        ///
        ///Makes a line between the A point set and the B point. Heading of line is calculated. You can modify the line by entering a heading or by touching B as often as you want..
        /// </summary>
        public static string ha_btnBPoint {
            get {
                return ResourceManager.GetString("ha_btnBPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel and Turn Off
        ///
        ///Exit the form and turn off the guidance mode. Existing lines are not deleted, it just turns them off in main display..
        /// </summary>
        public static string ha_btnCancel {
            get {
                return ResourceManager.GetString("ha_btnCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel and Return
        ///
        ///Cancels the current action and returns you back to the start..
        /// </summary>
        public static string ha_btnCancelCreate {
            get {
                return ResourceManager.GetString("ha_btnCancelCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Copy Line
        ///
        ///Makes a copy of the line selected in the List View. The name must remain unique. .
        /// </summary>
        public static string ha_btnDuplicate {
            get {
                return ResourceManager.GetString("ha_btnDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save and Continue.
        /// </summary>
        public static string ha_btnEnterContinue {
            get {
                return ResourceManager.GetString("ha_btnEnterContinue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à List Delete
        ///
        ///Select a line from the list, touch delete to remove the line..
        /// </summary>
        public static string ha_btnListDelete {
            get {
                return ResourceManager.GetString("ha_btnListDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Use Line and Exit
        ///
        ///Uses the line selected in the list and exit. .
        /// </summary>
        public static string ha_btnListUse {
            get {
                return ResourceManager.GetString("ha_btnListUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Manual Entry
        ///
        ///Manual entry of A and B points by using Latitude and Longitude. Brings up another form. .
        /// </summary>
        public static string ha_btnManual {
            get {
                return ResourceManager.GetString("ha_btnManual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à New Line
        ///
        ///Brings up the form to create a new line by AB or A plus heading or Manual Latitude and Longitude..
        /// </summary>
        public static string ha_btnNewABLine {
            get {
                return ResourceManager.GetString("ha_btnNewABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Heading Entry
        ///
        ///Enter a heading once the A Point has been set. Any number between 0 and 360 degrees..
        /// </summary>
        public static string ha_nudHeading {
            get {
                return ResourceManager.GetString("ha_nudHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Line Name
        ///
        ///Edit and make the name of the line here. Keep names unique. Touching the Time button adds time to the description..
        /// </summary>
        public static string ha_textBox1 {
            get {
                return ResourceManager.GetString("ha_textBox1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Add New Boundary
        ///
        ///Brings up the form to choose to either load a kml file for boundary or to Drive one. 
        ///
        ///If no boundaries are made, the first one you make is the outer boundary.
        ///
        ///If there is an outer boundary already made, the rest made will be inner boundaries.
        ///
        ///Touch on the Drive through Yes or No button for that boundary to change..
        /// </summary>
        public static string hb_btnAdd {
            get {
                return ResourceManager.GetString("hb_btnAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Add Point
        ///
        ///Add a point at the current position based on offset. Nice to make long straight lines by marking corners only. 
        ///
        ///You can record around corners, pause, hit Add point, drive and keep recording. Anything you want to do..
        /// </summary>
        public static string hb_btnAddPoint {
            get {
                return ResourceManager.GetString("hb_btnAddPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel
        ///
        ///At any time or on any form you can cancel. As you make boundaries and do changes they are saved. Nothing is saved when cancelling or exiting..
        /// </summary>
        public static string hb_btnCancel {
            get {
                return ResourceManager.GetString("hb_btnCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Single Boundary Delete
        ///
        ///Select a boundary in the list and delete it..
        /// </summary>
        public static string hb_btnDelete {
            get {
                return ResourceManager.GetString("hb_btnDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à All Boundaries Delete
        ///
        ///This button deletes all the boundaries. Careful - once gone they are gone..
        /// </summary>
        public static string hb_btnDeleteAll {
            get {
                return ResourceManager.GetString("hb_btnDeleteAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Last Point Made
        ///
        ///Deletes the last point made. Keep touching to delete as many as you want..
        /// </summary>
        public static string hb_btnDeleteLast {
            get {
                return ResourceManager.GetString("hb_btnDeleteLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Drive The Boundary
        ///
        ///Allows you to record the boundary as you drive. Button brings up the Boundary Player form to record points and where the points left or right of the center pivot point they are recorded..
        /// </summary>
        public static string hb_btnDriveOrExt {
            get {
                return ResourceManager.GetString("hb_btnDriveOrExt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Make Boundary using KML
        ///
        ///Brings up the next form that allows you to load either a single boundary or multiple boundaries..
        /// </summary>
        public static string hb_btnGetKML {
            get {
                return ResourceManager.GetString("hb_btnGetKML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Mark Left or Right
        ///
        ///Button used to select the left or right side of vehicle for making boundary.
        ///
        ///You can also enter distance in the offset numeric box..
        /// </summary>
        public static string hb_btnLeftRight {
            get {
                return ResourceManager.GetString("hb_btnLeftRight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Load Single Boundary From Google Earth
        ///
        ///Load a kml boundary that can either be the outer boundary or as inner boundaries. If there are no boundaries, it will be considered an outer boundary. If there already is a boundary, the boundary will be considered an inner boundary. .
        /// </summary>
        public static string hb_btnLoadBoundaryFromGE {
            get {
                return ResourceManager.GetString("hb_btnLoadBoundaryFromGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Load Multi Boundary From Google Earth
        ///
        ///Load a kml boundary that has the first line as the outer boundary and the rest as inner boundaries. .
        /// </summary>
        public static string hb_btnLoadMultiBoundaryFromGE {
            get {
                return ResourceManager.GetString("hb_btnLoadMultiBoundaryFromGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Open Google Earth
        ///
        ///Opens Google Earth if installed. There, you can make and save kml files for boundaries..
        /// </summary>
        public static string hb_btnOpenGoogleEarth {
            get {
                return ResourceManager.GetString("hb_btnOpenGoogleEarth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Record Pause 
        ///
        ///Touch to start recording, touch again to pause. While in pause you can touch add points or delete points, swap sides, change offset..
        /// </summary>
        public static string hb_btnPausePlay {
            get {
                return ResourceManager.GetString("hb_btnPausePlay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Restart Line
        ///
        ///Delete existing points and start over. .
        /// </summary>
        public static string hb_btnRestart {
            get {
                return ResourceManager.GetString("hb_btnRestart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Stop Boundary
        ///
        ///Boundary is all done. This will connect the last point to the first point and exit.
        ///
        ///You need at least 5 points or it will just not make a boundary..
        /// </summary>
        public static string hb_btnStop {
            get {
                return ResourceManager.GetString("hb_btnStop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Offset From Pivot
        ///
        ///The offset to mark the boundary is measure from the center of the pivot point - usually between the driving wheels - to mark the boundary lines.
        ///
        ///It defaults to one half the tool width. Use the select sides button to move from left to right side..
        /// </summary>
        public static string hb_nudOffset {
            get {
                return ResourceManager.GetString("hb_nudOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Remove Roll Offset
        ///
        ///Removes any offset currently added to roll to show actual roll angle as mounted.
        /// </summary>
        public static string hc_btnRemoveZeroOffset {
            get {
                return ResourceManager.GetString("hc_btnRemoveZeroOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Remove IMU from Display
        ///
        ///If you disconnect IMJ, you can remove all the values shown on the main display. Once you connect an imu to AgIO, it will show again automatically..
        /// </summary>
        public static string hc_btnResetIMU {
            get {
                return ResourceManager.GetString("hc_btnResetIMU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Send Changes to AutoSteer and Save
        ///
        ///If you make changes, be sure to send them and save them by touching send. If you do not, they will not be saved. if you want to cancel, just go to a different config page and return again. 
        ///
        ///Don&apos;t forget to Send and Save by using this button..
        /// </summary>
        public static string hc_btnSendSteerConfigPGN {
            get {
                return ResourceManager.GetString("hc_btnSendSteerConfigPGN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicle Delete Button
        ///
        ///Select a vehicle in the list, touch Delete Button to delete it..
        /// </summary>
        public static string hc_btnVehicleDelete {
            get {
                return ResourceManager.GetString("hc_btnVehicleDelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicle Load Button
        ///
        ///Select a vehicle in the list, touch Load Button to load it..
        /// </summary>
        public static string hc_btnVehicleLoad {
            get {
                return ResourceManager.GetString("hc_btnVehicleLoad", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicle Save Button
        ///
        ///After entering a vehicle name in the textbox, touch Save Button to save it..
        /// </summary>
        public static string hc_btnVehicleSave {
            get {
                return ResourceManager.GetString("hc_btnVehicleSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicle Save As Button
        ///
        ///Click a vehicle in the list, then touch Save As Button to overwrite that vehicle with the current settings. Answer Yes to overwrite the chosen vehicle or No to do nothing..
        /// </summary>
        public static string hc_btnVehicleSaveAs {
            get {
                return ResourceManager.GetString("hc_btnVehicleSaveAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Zero Roll Value
        ///
        ///Add the negative of the current roll value displayed to show zero roll. Removes the sensor mounted roll angle error so when the vehicle is flat, the roll value shows zero..
        /// </summary>
        public static string hc_btnZeroRoll {
            get {
                return ResourceManager.GetString("hc_btnZeroRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AutoSteer Manual or Automatic Engage mode.
        ///
        ///In manual mode, you must press the AutoSteer button to engage AutoSteer. Steer motor/Valve steer switch has no effect.
        ///
        ///In Auto Mode, when you engage the steer or valve steering switch, the AutoSteer button will automatically turn on.
        ///
        ///Be careful with Auto mode when travelling down the road. Always turn off or disconnect power to any autosteer mechanical device when commuting. .
        /// </summary>
        public static string hc_cboxAutoSteerAuto {
            get {
                return ResourceManager.GetString("hc_cboxAutoSteerAuto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à A2D Convertor Input Configuration
        ///
        ///Select either Single or Differential input. most commonly it is single type input ground referenced. Oddly even the Differential is still ground referenced but seems to work with OEM style WAS..
        /// </summary>
        public static string hc_cboxConv {
            get {
                return ResourceManager.GetString("hc_cboxConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Current Sensor enable
        ///
        ///If using a current sensor enable this feature to stop autosteer by holding the wheel and detecting a high current use..
        /// </summary>
        public static string hc_cboxCurrentSensor {
            get {
                return ResourceManager.GetString("hc_cboxCurrentSensor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Danfoss Valve
        ///
        ///If using the Danfoss style Udc valve, select this. The arduino sketch will then automatically use and send out the right values for the valve..
        /// </summary>
        public static string hc_cboxDanfoss {
            get {
                return ResourceManager.GetString("hc_cboxDanfoss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Roll
        ///
        ///Roll to the right must be a positive value. If roll shows a negative value, touch Invert Roll to make it positive. 
        ///
        ///A very important setting. See the picture on this form for clarity..
        /// </summary>
        public static string hc_cboxDataInvertRoll {
            get {
                return ResourceManager.GetString("hc_cboxDataInvertRoll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steering Wheel Encoder
        ///
        ///Poorly named, but allows the detection of turning the steering wheel being turned by using a shaft sensor. This setting enables it. 
        ///
        ///Additional setting is the counts. when the steer module counts that many detections, it turns off the steering drive..
        /// </summary>
        public static string hc_cboxEncoder {
            get {
                return ResourceManager.GetString("hc_cboxEncoder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Use Dual Antenna As IMU
        ///
        ///Instead of using dual antenna as heading directly, use fix to fix single antenna for heading and smooth heading with dual antenna heading value..
        /// </summary>
        public static string hc_cboxIsDualAsIMU {
            get {
                return ResourceManager.GetString("hc_cboxIsDualAsIMU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hydraulic Control Off On
        ///
        ///Enable hydraulic control of tool when entering and leaving the headland. .
        /// </summary>
        public static string hc_cboxIsHydOn {
            get {
                return ResourceManager.GetString("hc_cboxIsHydOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reverse Detect
        ///
        ///Show the vehicle backing up when enabled or screen spins 180 degrees and shows still going forward.
        /// </summary>
        public static string hc_cboxIsReverseOn {
            get {
                return ResourceManager.GetString("hc_cboxIsReverseOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à RTK Alarm
        ///
        ///Enabling this shows an alarm called Lost RTK on the main screen..
        /// </summary>
        public static string hc_cboxIsRTK {
            get {
                return ResourceManager.GetString("hc_cboxIsRTK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à AutoSteer Off if RTK Alarm
        ///
        ///If RTK alarm is on, then enabling this turns off the AutoSteer when RTK is lost..
        /// </summary>
        public static string hc_cboxIsRTK_KillAutoSteer {
            get {
                return ResourceManager.GetString("hc_cboxIsRTK_KillAutoSteer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Controls
        ///
        ///If your controls are on instead of off, enable this to invert the control. .
        /// </summary>
        public static string hc_cboxMachInvertRelays {
            get {
                return ResourceManager.GetString("hc_cboxMachInvertRelays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Motor Driver Type
        ///
        ///2 Choices being Cytron and IBT2 so pick the one you are using..
        /// </summary>
        public static string hc_cboxMotorDrive {
            get {
                return ResourceManager.GetString("hc_cboxMotorDrive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Number of Sections
        ///
        ///Using the drop down, choose the number of sections your tool has. It uses the default section width value to fill in the section width for you. 
        ///Generally set the default section width first, then the number of sections. You can now manually edit any section width if they are different by clicking on that particular section width spinner.
        /// </summary>
        public static string hc_cboxNumSections {
            get {
                return ResourceManager.GetString("hc_cboxNumSections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pressure Sensor Switch
        ///
        ///when using an oil pressure sensor, enable this feature..
        /// </summary>
        public static string hc_cboxPressureSensor {
            get {
                return ResourceManager.GetString("hc_cboxPressureSensor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Section Response Fast/Slow
        ///
        ///This selects how often section control is run per second. In fast mode it is one half the nmea speed and in slow mode it is half of that. 
        ///If you have a slow computer, and section control is not super critical and speeds are slower, use the slow mode. If you find the sections aren&apos;t turning on fast enough, select fast mode. 
        ///Section math is intense along with boundaries and headlands so this may help a slower tablet..
        /// </summary>
        public static string hc_cboxSectionResponse {
            get {
                return ResourceManager.GetString("hc_cboxSectionResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Switch Style
        ///
        ///2 types of Switch. 
        ///
        ///Button- Push and release turns Auto Steer On. Push and release again turns Auto Steer off.
        ///
        ///Switch - like a light switch style. Connect and Auto Steer is on, Disconnect and Auto Steer turns off. 
        ///
        ///Note... Any type switch or button can be configured to do either method. The Switch setting is most common for steer motors that just push on a switch when engaged and then when released simply opens the switch again.
        ///
        ///The button setting is more common for hydraul [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_cboxSteerEnable {
            get {
                return ResourceManager.GetString("hc_cboxSteerEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Tool Control
        ///
        ///Enable sending tram on off signal to seed runs for full tram control. .
        /// </summary>
        public static string hc_cboxTramOnBackBuffer {
            get {
                return ResourceManager.GetString("hc_cboxTramOnBackBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Select IMU orientation axis so when the vehicle rolls to the side, the roll value changes. .
        /// </summary>
        public static string hc_cboxXY {
            get {
                return ResourceManager.GetString("hc_cboxXY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Auto Day Night automatically goes to night mode at sunset and day mode at sunrise.
        /// </summary>
        public static string hc_chkDisplayDayNight {
            get {
                return ResourceManager.GetString("hc_chkDisplayDayNight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Extra guidance lines beside the one you are following.
        /// </summary>
        public static string hc_chkDisplayExtraGuides {
            get {
                return ResourceManager.GetString("hc_chkDisplayExtraGuides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display the textured background on field surface or if off shows just a solid color.
        /// </summary>
        public static string hc_chkDisplayFloor {
            get {
                return ResourceManager.GetString("hc_chkDisplayFloor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display the grid on the field surface.
        /// </summary>
        public static string hc_chkDisplayGrid {
            get {
                return ResourceManager.GetString("hc_chkDisplayGrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Use the custom keyboard when entering a text type of entry.
        /// </summary>
        public static string hc_chkDisplayKeyboard {
            get {
                return ResourceManager.GetString("hc_chkDisplayKeyboard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à The Graphic dots at top of screen showing distance away from the guidance line.
        /// </summary>
        public static string hc_chkDisplayLightbar {
            get {
                return ResourceManager.GetString("hc_chkDisplayLightbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Log the incoming NMEA, stored in the fields directory
        ///
        ///Caution - Make a very big file quickly.
        /// </summary>
        public static string hc_chkDisplayLogNMEA {
            get {
                return ResourceManager.GetString("hc_chkDisplayLogNMEA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display the individual polygons that make up the mapping.
        /// </summary>
        public static string hc_chkDisplayPolygons {
            get {
                return ResourceManager.GetString("hc_chkDisplayPolygons", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display the colorful sky in the background when in 3D.
        /// </summary>
        public static string hc_chkDisplaySky {
            get {
                return ResourceManager.GetString("hc_chkDisplaySky", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Display the Speedometer in top right corner.
        /// </summary>
        public static string hc_chkDisplaySpeedo {
            get {
                return ResourceManager.GetString("hc_chkDisplaySpeedo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Full Screen on Start Up.
        /// </summary>
        public static string hc_chkDisplayStartFullScreen {
            get {
                return ResourceManager.GetString("hc_chkDisplayStartFullScreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Steer Motor Drive
        ///
        ///If the motor turns the wrong way in Drive Mode, enable the Invert Steer Motor setting so it turns the opposite way.
        /// </summary>
        public static string hc_chkInvertSteer {
            get {
                return ResourceManager.GetString("hc_chkInvertSteer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Wheel Angle Sensor
        ///
        ///Turning to the right the WAS should be a positive angle. If it is not, Invert the WAS.
        /// </summary>
        public static string hc_chkInvertWAS {
            get {
                return ResourceManager.GetString("hc_chkInvertWAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Invert Steer Relay
        ///
        ///This controls only the relay for PWM2 pin. If you need Normally open or Normally Closed click the invert to have the opposite function of the relay..
        /// </summary>
        public static string hc_chkSteerInvertRelays {
            get {
                return ResourceManager.GetString("hc_chkSteerInvertRelays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à IMU Fusion Balance
        ///
        ///As usual a setting at either extreme is bad. IMU balance sets how much IMU and how much fix to fix heading is used to determine a fused heading. 
        ///
        ///The GPS is quite stable over a longer time period while the IMU is very stable short term but drifts to some funky angle over time. 
        ///
        ///If too much IMU is set, then making sharp turns etc can take a long time to correct by the GPS and will cause steering to be in the wrong heading. Too much GPS and the heading will be noisy back and forth  [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_hsbarFusion {
            get {
                return ResourceManager.GetString("hc_hsbarFusion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Length of UTurn Legs
        ///
        ///Sets the amount of meters the legs of the uturn continue past and into the turn. Allows the vehicle to line up better to the next guidance line.
        /// </summary>
        public static string hc_lblUTurnLegDistance {
            get {
                return ResourceManager.GetString("hc_lblUTurnLegDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à UTurn Smoothing
        ///
        ///Removes the abrupt change of direction for Keyhole turns and smooths them out. Makes the turn easier to follow..
        /// </summary>
        public static string hc_lblUTurnSmoothing {
            get {
                return ResourceManager.GetString("hc_lblUTurnSmoothing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Vehicles List
        ///
        ///The list of saved vehicles..
        /// </summary>
        public static string hc_ListViewVehicles {
            get {
                return ResourceManager.GetString("hc_ListViewVehicles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Length of AB Line
        ///
        ///Make sure line is long enough to reach from boundary edge to boundary edge and a little more. Twice as long as longest field dimension is easy..
        /// </summary>
        public static string hc_nudABLength {
            get {
                return ResourceManager.GetString("hc_nudABLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Age of GPS Alarm
        ///
        ///Set how many seconds before the alarm occurs.
        /// </summary>
        public static string hc_nudAgeAlarm {
            get {
                return ResourceManager.GetString("hc_nudAgeAlarm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Section Cutoff Speed
        ///
        ///The lower limit of speed before the sections auto turn off. Below this setting, the sections will turn off. Prevents over application..
        /// </summary>
        public static string hc_nudCutoffSpeed {
            get {
                return ResourceManager.GetString("hc_nudCutoffSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Default Section Width
        ///
        ///Enter the default section width for all sections here. Selecting then the number of sections fills in individual sections with the default value. Now go ahead and edit any sections that need a different width then the default..
        /// </summary>
        public static string hc_nudDefaultSectionWidth {
            get {
                return ResourceManager.GetString("hc_nudDefaultSectionWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Forward Direction Compensation For Turns
        ///
        ///This is a difficult concept to describe, so there is a video about it on you tube called Reverse Compensation. But here goes in text.
        ///
        ///What you are doing is offsetting the effect that the antenna swings very quickly left or right when you initially turn the steering wheel. This tries to dampen that effect. It is very complex to eliminate. There is much less of this effect when going forward so best just to leave the setting as is. 
        ///
        ///You can use the steering ch [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_nudForwardComp {
            get {
                return ResourceManager.GetString("hc_nudForwardComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Guidance Line Acquire Distance
        ///
        ///How many seconds ahead should AOG look for the next guidance line to lock onto. The faster you drive, the farther it will look ahead. AOG will draw the next guidance line at this spot and you can hit autosteer button and will lock on..
        /// </summary>
        public static string hc_nudGuidanceLookAhead {
            get {
                return ResourceManager.GetString("hc_nudGuidanceLookAhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Hydraulic Look Ahead
        ///
        ///Time in seconds how far ahead the tool should begin to lower when entering the work area. Lift occurs when tool is completely out of the work area and in the headland..
        /// </summary>
        public static string hc_nudHydLiftLookAhead {
            get {
                return ResourceManager.GetString("hc_nudHydLiftLookAhead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cross Track Distance per Pixel
        ///
        ///How many cm/inches represent each square dot on the light bar. Small values, the dots move very quickly, Too big and the dots hardly move. handy for manual steering..
        /// </summary>
        public static string hc_nudLightbarCmPerPixel {
            get {
                return ResourceManager.GetString("hc_nudLightbarCmPerPixel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pixel Width of Lines Displayed
        ///
        ///How many pixels wide are the displayed lines. More pixels is wider displayed line. Valid from 1 to 8.
        /// </summary>
        public static string hc_nudLineWidth {
            get {
                return ResourceManager.GetString("hc_nudLineWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Time to shut sections off before getting to the applied region. .
        /// </summary>
        public static string hc_nudLookAheadOff {
            get {
                return ResourceManager.GetString("hc_nudLookAheadOff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Time to turn on the section early before getting to the unapplied area. .
        /// </summary>
        public static string hc_nudLookAheadOn {
            get {
                return ResourceManager.GetString("hc_nudLookAheadOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Lower Time
        ///
        ///How long in seconds the hydraulic control should remain on for lowering tool..
        /// </summary>
        public static string hc_nudLowerTime {
            get {
                return ResourceManager.GetString("hc_nudLowerTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Steer Counts Trigger
        ///
        ///When this number of detections are made it will disable the auto steer.
        ///
        ///Depending on sensor used the value can be either turn counts, oil pressure in Bar, and current in Amps..
        /// </summary>
        public static string hc_nudMaxCounts {
            get {
                return ResourceManager.GetString("hc_nudMaxCounts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Minumum Coverage Percent
        ///
        ///Based on per section, how much of the area ahead needs application in order to turn on or off the section. 
        ///If set to 100, section never turns off until all area is applied. 
        ///If set to 50, if half the area is already applied ahead of section, the section will turn off. .
        /// </summary>
        public static string hc_nudMinCoverage {
            get {
                return ResourceManager.GetString("hc_nudMinCoverage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Step distance for Heading Calculation
        ///
        ///Heading is determined by taking 2 points and calculating an angle. The slower you go, the more variation side to side there is, more noise, etc make the heading quite unstable to just go from last point to current point. OK when going fast. AOG remembers several points back in time for this purpose. The Step Distance is how far back in that history of points do you want to use to calculate the heading.
        ///
        ///A long step distance provides quite a stable reading BUT there [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_nudMinFixStepDistance {
            get {
                return ResourceManager.GetString("hc_nudMinFixStepDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Minimum Frame Time
        ///
        ///Set in milliseconds. If GPS is 10 hz then a single update takes 100 msec between new position updates. In this case the elapsed time would be zero since a new one arrives every 100 msec. 
        ///
        ///If you set it to 70 then the elapsed time would wait for another 70 msec - or 170 msec total - before a missed update would occur. These missed updates get counted and show up by the AGIO button on the left side. A few misses happen because windows is busy, or bringing up the Config settings becaus [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_nudMinimumFrameTime {
            get {
                return ResourceManager.GetString("hc_nudMinimumFrameTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tool Offset
        ///
        ///Positive value moves the tool to the right, negative value moves the tool left.
        /// </summary>
        public static string hc_nudOffset {
            get {
                return ResourceManager.GetString("hc_nudOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance Overlap or Gap
        ///
        ///Positive value indicates overlap, negative indicates gap. Tool width remains the same however the guidance lines are adjusted accordingly. .
        /// </summary>
        public static string hc_nudOverlap {
            get {
                return ResourceManager.GetString("hc_nudOverlap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Raise Time
        ///
        ///How long in seconds the hydraulic control should remain on for lifting tool..
        /// </summary>
        public static string hc_nudRaiseTime {
            get {
                return ResourceManager.GetString("hc_nudRaiseTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reverse Direction Compensation For Turns
        ///
        ///This is a difficult concept to describe, so there is a video about it on you tube called Reverse Compensation. But here goes in text.
        ///
        ///What you are doing is offsetting the effect that the antenna swings very quickly left or right when you initially turn the steering wheel. This tries to dampen that effect. It is very complex to eliminate.
        ///
        ///The effect is much greater in reverse because the antenna based on direction is behind the antenna. Think of a loader buck [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        public static string hc_nudReverseComp {
            get {
                return ResourceManager.GetString("hc_nudReverseComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Section Width Entry
        ///
        ///Enter the width of the section in cm/inches. All the section widths added together become the tool width..
        /// </summary>
        public static string hc_nudSectionWidth {
            get {
                return ResourceManager.GetString("hc_nudSectionWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Nudge Distance
        ///
        ///Distance to move guidance line over, used in the Edit AB form.
        /// </summary>
        public static string hc_nudSnapDistance {
            get {
                return ResourceManager.GetString("hc_nudSnapDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Start Speed
        ///
        ///Speed to reach before using every position to calculate heading. Below this value you must travel about a meter before position and heading are updated on the screen.
        ///
        ///This is important when going slow, backing up and turning etc. to know where you are, the heading you are going, and whether or not you are in reverse. 
        ///
        ///A higher setting like at least 1.5 to 2 allows for a much more reliable determination of reverse and heading. .
        /// </summary>
        public static string hc_nudStartSpeed {
            get {
                return ResourceManager.GetString("hc_nudStartSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Width
        ///
        ///Usually the width of your sprayer, but is the width of the spacing between tramlines.
        /// </summary>
        public static string hc_nudTramWidth {
            get {
                return ResourceManager.GetString("hc_nudTramWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Turn Distance from Boundary
        ///
        ///Distance from apex of turn to the boundary. The closest distance the vehicle will pass by the boundary. Ensure vehicle and 1/2 tool width does not cross over boundary..
        /// </summary>
        public static string hc_nudTurnDistanceFromBoundary {
            get {
                return ResourceManager.GetString("hc_nudTurnDistanceFromBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Time to keep sections going after applied area says they should turn off. .
        /// </summary>
        public static string hc_nudTurnOffDelay {
            get {
                return ResourceManager.GetString("hc_nudTurnOffDelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Settings have Changed Graphic
        ///
        ///You have made a change on this settings page when this graphic shows up. Now be sure to save and send your changes - or nothing will happen and changes will be lost..
        /// </summary>
        public static string hc_pboxSendSteer {
            get {
                return ResourceManager.GetString("hc_pboxSendSteer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Set Units to Imperial.
        /// </summary>
        public static string hc_rbtnDisplayImperial {
            get {
                return ResourceManager.GetString("hc_rbtnDisplayImperial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Set Units to Metric.
        /// </summary>
        public static string hc_rbtnDisplayMetric {
            get {
                return ResourceManager.GetString("hc_rbtnDisplayMetric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Fix to Fix Heading Type.
        /// </summary>
        public static string hc_rbtnHeadingFix {
            get {
                return ResourceManager.GetString("hc_rbtnHeadingFix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à VTG Sentence Heading Type.
        /// </summary>
        public static string hc_rbtnHeadingGPS {
            get {
                return ResourceManager.GetString("hc_rbtnHeadingGPS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Dual Antenna Heading Type.
        /// </summary>
        public static string hc_rbtnHeadingHDT {
            get {
                return ResourceManager.GetString("hc_rbtnHeadingHDT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Tool positioning
        ///
        ///Select where the tool will end up when making a pass on the tram line. This is decided if you are odd or even number of passes of seeding to get to the next tram line. .
        /// </summary>
        public static string hc_rbtnTramInnerOuter {
            get {
                return ResourceManager.GetString("hc_rbtnTramInnerOuter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Name of new vehicle to be saved
        ///
        ///Enter the new vehicle name and touch the Save button.
        /// </summary>
        public static string hc_tboxVehicleNameSave {
            get {
                return ResourceManager.GetString("hc_tboxVehicleNameSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à A Point
        ///
        ///The start of the Curve Line. .
        /// </summary>
        public static string hcur_btnAPoint {
            get {
                return ResourceManager.GetString("hcur_btnAPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à B Point
        ///
        ///The end of the Curve Line..
        /// </summary>
        public static string hcur_btnBPoint {
            get {
                return ResourceManager.GetString("hcur_btnBPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Pause Rec
        ///
        ///Pause the creation of points, continue recording points if paused.
        ///
        ///This is really useful if you want a straighter line instead of recording all the points. The line between the pauses will be a straight line. 
        ///
        ///After saving the line, a small amount of smoothing is also applied. .
        /// </summary>
        public static string hcur_btnPausePlay {
            get {
                return ResourceManager.GetString("hcur_btnPausePlay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Cancel Touch Points
        ///
        ///Delete any points touched on the line and start again. 
        ///
        ///If you touch again after touching second point, it will start selecting the first point again..
        /// </summary>
        public static string hd_btnCancelTouch {
            get {
                return ResourceManager.GetString("hd_btnCancelTouch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete AB Line
        ///
        ///Delete the selected AB Line.
        /// </summary>
        public static string hd_btnDeleteABLine {
            get {
                return ResourceManager.GetString("hd_btnDeleteABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Curve
        ///
        ///Delete the selected curve..
        /// </summary>
        public static string hd_btnDeleteCurve {
            get {
                return ResourceManager.GetString("hd_btnDeleteCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Draw Sections
        ///
        ///Draw the section mapping on the field background for reference..
        /// </summary>
        public static string hd_btnDrawSections {
            get {
                return ResourceManager.GetString("hd_btnDrawSections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Flip Offset
        ///
        ///Flip the offset to the other side of line. Use before creating the curve.
        /// </summary>
        public static string hd_btnFlipOffset {
            get {
                return ResourceManager.GetString("hd_btnFlipOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Make AB Line
        ///
        ///Once 2 points are selected, and distance from boundary set, make a new AB Line guidance line. You can edit the name in the textbox..
        /// </summary>
        public static string hd_btnMakeABLine {
            get {
                return ResourceManager.GetString("hd_btnMakeABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Make Boundary Contour
        ///
        ///Creates a guidance line around the whole field that is set in distance numeric entry. Usually is one half tool width away..
        /// </summary>
        public static string hd_btnMakeBoundaryCurve {
            get {
                return ResourceManager.GetString("hd_btnMakeBoundaryCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Make Curve
        ///
        ///Once 2 points are selected, and distance from boundary set, make a new Curve guidance line. You can edit the name in the textbox..
        /// </summary>
        public static string hd_btnMakeCurve {
            get {
                return ResourceManager.GetString("hd_btnMakeCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Select AB Line
        ///
        ///Keep touching to cycle thru the lines to select the one you want..
        /// </summary>
        public static string hd_btnSelectABLine {
            get {
                return ResourceManager.GetString("hd_btnSelectABLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Select Curve
        ///
        ///Keep touching to cycle thru the lines to select the one you want..
        /// </summary>
        public static string hd_btnSelectCurve {
            get {
                return ResourceManager.GetString("hd_btnSelectCurve", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance From Boundary
        ///
        ///Enter the distance left or right from the line created by the 2 points. Defaults to 1 half the tool width..
        /// </summary>
        public static string hd_nudDistance {
            get {
                return ResourceManager.GetString("hd_nudDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Boundary Display
        ///
        ///Touch 2 points on the boundary to make a line. Touch Create Curve or Create AB Line to make the line. Edit the name. .
        /// </summary>
        public static string hd_oglSelf {
            get {
                return ResourceManager.GetString("hd_oglSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Edit Line
        ///
        ///Touch to edit the line to rename the default. .
        /// </summary>
        public static string hd_tboxNameLine {
            get {
                return ResourceManager.GetString("hd_tboxNameLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save For Now
        ///
        ///Line changes not saved with the field, they are lost when loading the field again. But the changes are in effect.
        /// </summary>
        public static string he_btnNoSave {
            get {
                return ResourceManager.GetString("he_btnNoSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save and Exit
        ///
        ///Changes are saved with the field and exit the form. .
        /// </summary>
        public static string he_btnOK {
            get {
                return ResourceManager.GetString("he_btnOK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Delete Points on Line
        ///
        ///First select 2 points on the line to delete all the points for.
        ///
        ///Touch Delete Button.
        ///
        ///This removes all the points between the selected 2 points and makes a straight line. .
        /// </summary>
        public static string hh_btnDeletePoints {
            get {
                return ResourceManager.GetString("hh_btnDeletePoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Exit
        ///
        ///Exit the form and set the headland On..
        /// </summary>
        public static string hh_btnExit {
            get {
                return ResourceManager.GetString("hh_btnExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Add Distance to Headland
        ///
        ///Adds the distance entered in the numeric entry to the existing headland..
        /// </summary>
        public static string hh_btnMakeFixedHeadland {
            get {
                return ResourceManager.GetString("hh_btnMakeFixedHeadland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Reset Headland
        ///
        ///Puts the headland back to the boundary, resetting it to 0 distance..
        /// </summary>
        public static string hh_btnReset {
            get {
                return ResourceManager.GetString("hh_btnReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Add Distance
        ///
        ///Adds the distance set in the numeric to the line selected by the 2 points..
        /// </summary>
        public static string hh_btnSetDistance {
            get {
                return ResourceManager.GetString("hh_btnSetDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Headland Off
        ///
        ///Shuts off the headland completely. .
        /// </summary>
        public static string hh_btnTurnOffHeadland {
            get {
                return ResourceManager.GetString("hh_btnTurnOffHeadland", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Sections Control In Headland
        ///
        ///Enable of disable the turning off of sections within the headland..
        /// </summary>
        public static string hh_cboxIsSectionControlled {
            get {
                return ResourceManager.GetString("hh_cboxIsSectionControlled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tool Widths
        ///
        ///Use the pulldown to set how many tool widths in from the boundary you want the headland to be. 
        ///
        ///If you select it again, it will remove the previous headland and make the new one..
        /// </summary>
        public static string hh_cboxToolWidths {
            get {
                return ResourceManager.GetString("hh_cboxToolWidths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Distance Entry
        ///
        ///Distance entered will be added to the existing headland distance. Press the Enter Distance button to add it..
        /// </summary>
        public static string hh_nudDistance {
            get {
                return ResourceManager.GetString("hh_nudDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Selected Distance Move
        ///
        ///Select 2 points on the headland line you want to move independently
        ///
        ///Enter the distance to move the segment - can be positive or negative..
        /// </summary>
        public static string hh_nudSetDistance {
            get {
                return ResourceManager.GetString("hh_nudSetDistance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Move Reference Half Tool Width
        ///
        ///Moves the reference line one half tool width left or right..
        /// </summary>
        public static string ht_btnAdjHalfToolWidth {
            get {
                return ResourceManager.GetString("ht_btnAdjHalfToolWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Off
        ///
        ///Cancel and delete everything. Turn the tram off.
        /// </summary>
        public static string ht_btnCancel {
            get {
                return ResourceManager.GetString("ht_btnCancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Nudge Reference Line
        ///
        ///Nudge reference line by amount shown.
        /// </summary>
        public static string ht_btnLeftRightNudge {
            get {
                return ResourceManager.GetString("ht_btnLeftRightNudge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Save and Exit
        ///
        ///Save and activate the Tram lines. Exit the setup form..
        /// </summary>
        public static string ht_btnSave {
            get {
                return ResourceManager.GetString("ht_btnSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Swap A to B
        ///
        ///Swaps the order of the line so right is left. 
        ///
        ///This is important as tram lines are made on the right side of the line counting positive. .
        /// </summary>
        public static string ht_btnSwapAB {
            get {
                return ResourceManager.GetString("ht_btnSwapAB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à Tram Passes
        ///
        ///Enter the number of tram passes or use the up down arrows to change the number.
        /// </summary>
        public static string ht_nudPasses {
            get {
                return ResourceManager.GetString("ht_nudPasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à https://www.youtube.com/watch?v=iN2cZ8avHag.
        /// </summary>
        public static string v_AboutIntro {
            get {
                return ResourceManager.GetString("v_AboutIntro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à https://www.youtube.com/watch?v=fE3TPRIRSFg.
        /// </summary>
        public static string v_RecordedPathForm {
            get {
                return ResourceManager.GetString("v_RecordedPathForm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à https://www.youtube.com/watch?v=3SdvYgx8HHc.
        /// </summary>
        public static string v_SteerSettingsForm {
            get {
                return ResourceManager.GetString("v_SteerSettingsForm", resourceCulture);
            }
        }
    }
}
